<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
    profile="phiz.profile.context.web"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    
    <!--====================================================================================================
    = KEY STORES
    =====================================================================================================-->
    <!--suppress SpringPlaceholdersInspection -->
    <beans:bean id="keyStoreKeyWsClient" parent="keyStoreJks" lazy-init="true"
        p:password="${phiz.crypto.store.key.ws.client.pass}"
        p:resource="${phiz.crypto.store.key.ws.client.file}"/>
    
    <!--suppress SpringPlaceholdersInspection -->
    <beans:bean id="keyStoreTrustWsClient" parent="keyStoreJks" lazy-init="true"
        p:password="${phiz.crypto.store.trust.ws.client.pass}"
        p:resource="${phiz.crypto.store.trust.ws.client.file}"/>
    
    <!--====================================================================================================
    = KEY MANAGERS
    =====================================================================================================-->
    <!--suppress SpringPlaceholdersInspection -->
    <beans:bean id="keyManagerWsClient" parent="keyManagerBase" lazy-init="true"
        p:keyStore-ref="keyStoreKeyWsClient"
        p:password="${phiz.crypto.store.key.ws.client.entry.ssl.pass}"/>
    
    <!--====================================================================================================
    = TRUST MANAGERS
    =====================================================================================================-->
    <beans:bean id="trustManagerWsClient" parent="trustManagerBase" lazy-init="true"
        p:keyStore-ref="keyStoreTrustWsClient"/>
    
    <!--====================================================================================================
    = SSL PARAMETERS
    =====================================================================================================-->
    <beans:bean id="sslParamsClientWsClient" parent="sslParamsClient"/>
    
    <!--====================================================================================================
    = SSL CONTEXTS
    =====================================================================================================-->
    <beans:bean id="sslContextWsClient" parent="sslContextBase" lazy-init="true">
        <beans:property name="keyManagers">
            <beans:array>
                <beans:ref bean="keyManagerWsClient"/>
            </beans:array>
        </beans:property>
        <beans:property name="trustManagers">
            <beans:array>
                <beans:ref bean="trustManagerWsClient"/>
            </beans:array>
        </beans:property>
    </beans:bean>
    
    <!--====================================================================================================
    = SSL CLIENT SOCKET FACTORIES
    =====================================================================================================-->
    <beans:bean id="sslSocketFactoryClientWsClient" parent="sslSocketFactoryClientBase" lazy-init="true"
        p:sslContext-ref="sslContextWsClient"
        p:sslParameters-ref="sslParamsClientWsClient"/>
    
    <!--====================================================================================================
    = TLS PARAMETERS: CLIENT
    =====================================================================================================-->
    <beans:bean id="tlsParamsClient" class="org.apache.cxf.configuration.jsse.TLSClientParameters" parent="tlsParams" abstract="true"
        p:disableCNCheck="true"/>
    
    <!--suppress SpringPlaceholdersInspection -->
    <beans:bean id="tlsParamsClientWs" parent="tlsParamsClient" lazy-init="true"
        p:certAlias="${phiz.crypto.store.key.ws.client.entry.ssl.alias}"
        p:SSLSocketFactory-ref="sslSocketFactoryClientWsClient"/>
    
    <!--====================================================================================================
    = CLIENT POLICIES
    =====================================================================================================-->
    <beans:bean id="clientPolicyHttp" class="org.apache.cxf.transports.http.configuration.HTTPClientPolicy" abstract="true"
        p:allowChunking="false"
        p:asyncExecuteTimeoutRejection="true"
        p:cacheControl="no-cache, no-store, no-transform"
        p:connection="CLOSE"/>
    
    <!--====================================================================================================
    = CONDUIT FACTORIES
    =====================================================================================================-->
    <beans:bean id="conduitFactoryHttp" class="org.apache.cxf.transport.http.HTTPConduitFactory" abstract="true"/>
    
    <beans:bean id="conduitFactoryHttpAsync" class="gov.hhs.onc.phiz.web.ws.transport.impl.PhizAsyncHttpConduitFactory" parent="conduitFactoryHttp"
        destroy-method="shutdown"
        c:bus-ref="busPhiz">
        <beans:property name="properties">
            <beans:map>
                <beans:entry key="#{ T(org.apache.cxf.transport.http.asyncclient.AsyncHTTPConduit).USE_ASYNC }"
                    value="#{ T(org.apache.cxf.transport.http.asyncclient.AsyncHTTPConduitFactory.UseAsyncPolicy).ALWAYS }"/>
                <!--suppress SpringPlaceholdersInspection -->
                <beans:entry key="#{ T(org.apache.cxf.transport.http.asyncclient.AsyncHTTPConduitFactory).INTEREST_OP_QUEUED }"
                    value="${phiz.ws.client.async.interest.op.queued}"/>
                <!--suppress SpringPlaceholdersInspection -->
                <beans:entry key="#{ T(org.apache.cxf.transport.http.asyncclient.AsyncHTTPConduitFactory).SELECT_INTERVAL }"
                    value="${phiz.ws.client.async.select.interval}"/>
                <!--suppress SpringPlaceholdersInspection -->
                <beans:entry key="#{ T(org.apache.cxf.transport.http.asyncclient.AsyncHTTPConduitFactory).THREAD_COUNT }"
                    value="${phiz.ws.client.async.io.thread.count}"/>
            </beans:map>
        </beans:property>
    </beans:bean>
    
    <!--====================================================================================================
    = CONDUITS
    =====================================================================================================-->
    <beans:bean id="conduit" class="org.apache.cxf.transport.Conduit" abstract="true"/>
    
    <beans:bean id="conduitHttp" class="org.apache.cxf.transport.http.HTTPConduit" parent="conduit" abstract="true"
        p:tlsClientParameters-ref="tlsParamsClientWs">
        <beans:property name="client">
            <!--suppress SpringPlaceholdersInspection -->
            <beans:bean parent="clientPolicyHttp"
                p:asyncExecuteTimeout="${phiz.ws.client.async.exec.timeout}"
                p:connectionTimeout="${phiz.ws.client.conn.timeout}"
                p:receiveTimeout="${phiz.ws.client.receive.timeout}"/>
        </beans:property>
    </beans:bean>
    
    <beans:bean id="conduitHttpAsync" class="gov.hhs.onc.phiz.web.ws.transport.impl.PhizAsyncHttpConduit" parent="conduitHttp" abstract="true">
        <beans:constructor-arg name="bus" ref="busPhiz"/>
        <beans:constructor-arg name="conduitFactory" ref="conduitFactoryHttpAsync"/>
    </beans:bean>
    
    <beans:bean name="*.http-conduit" class="gov.hhs.onc.phiz.web.ws.transport.impl.PhizAsyncHttpConduit" parent="conduitHttpAsync" lazy-init="true"/>
    
    <!--====================================================================================================
    = CLIENTS
    =====================================================================================================-->
    <beans:bean id="client" class="org.apache.cxf.endpoint.Client" abstract="true"/>
    
    <beans:bean id="clientJaxWs" class="gov.hhs.onc.phiz.web.ws.jaxws.impl.PhizJaxWsClientFactoryBean" parent="client" abstract="true"
        p:bindingConfig-ref="soapBindingConfig12"
        p:bus-ref="busPhiz"
        p:dataBinding-ref="dataBindingJaxb">
        <beans:property name="conduitSelector">
            <beans:bean class="org.apache.cxf.endpoint.DeferredConduitSelector"/>
        </beans:property>
        <beans:property name="features">
            <beans:list>
                <beans:ref bean="featureLogging"/>
                <beans:ref bean="featureSchemaValidation"/>
            </beans:list>
        </beans:property>
    </beans:bean>
    
    <!--====================================================================================================
    = CLIENTS: IIS
    =====================================================================================================-->
    <!--suppress SpringPlaceholdersInspection -->
    <beans:bean id="clientIis" parent="clientJaxWs" lazy-init="true" scope="prototype"
        p:endpointName="#{ T(gov.hhs.onc.phiz.ws.PhizWsQnames).PORT }"
        p:serviceClass="gov.hhs.onc.phiz.ws.iis.IisPortType"
        p:serviceName="#{ T(gov.hhs.onc.phiz.ws.PhizWsQnames).SERVICE }"
        p:wsdlLocation="${phiz.ws.iis.dev.wsdl.loc}"/>
</beans:beans>