<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    
    <!--====================================================================================================
    = SSL DEBUG PRINT STREAMS
    =====================================================================================================-->
    <beans:bean id="sslDebugPrintStream" class="gov.hhs.onc.phiz.crypto.logging.impl.SslDebugPrintStream" abstract="true">
        <beans:property name="eventProcessors">
            <beans:set>
                <beans:ref bean="sslEventProcHelloImpl"/>
            </beans:set>
        </beans:property>
    </beans:bean>
    
    <beans:bean id="sslDebugPrintStreamOut" parent="sslDebugPrintStream"
        c:type="#{ T(gov.hhs.onc.phiz.crypto.logging.SslDebugPrintStreamType).OUT }"/>
    
    <beans:bean id="sslDebugPrintStreamErr" parent="sslDebugPrintStream"
        c:type="#{ T(gov.hhs.onc.phiz.crypto.logging.SslDebugPrintStreamType).ERR }"/>
    
    <!--====================================================================================================
    = KEY MANAGERS
    =====================================================================================================-->
    <beans:bean id="keyManager" class="javax.net.ssl.KeyManager" abstract="true"/>
    
    <beans:bean id="keyManagerX509Extended" class="javax.net.ssl.X509ExtendedKeyManager" parent="keyManager" abstract="true"/>
    
    <beans:bean id="keyManagerBase" class="gov.hhs.onc.phiz.crypto.ssl.impl.PhizKeyManagerFactoryBean" parent="keyManagerX509Extended" abstract="true"
        p:provider="#{ T(gov.hhs.onc.phiz.crypto.PhizCryptoProviders).SUN_JSSE }"
        p:type="NewSunX509"/>
    
    <!--====================================================================================================
    = CERTIFICATE PATH CHECKERS
    =====================================================================================================-->
    <beans:bean id="certPathChecker" class="java.security.cert.CertPathChecker" abstract="true"/>
    
    <beans:bean id="certPathCheckerPkix" class="java.security.cert.PKIXCertPathChecker" parent="certPathChecker" abstract="true"/>
    
    <!--====================================================================================================
    = CONSTRAINTS CHECKERS
    =====================================================================================================-->
    <!--suppress SpringBeanConstructorArgInspection -->
    <beans:bean id="constraintsChecker" class="gov.hhs.onc.phiz.crypto.ssl.constraints.impl.PhizConstraintsChecker" parent="certPathCheckerPkix"
        lazy-init="true" scope="prototype">
        <beans:property name="keyTypes">
            <beans:set>
                <beans:value>RSA</beans:value>
            </beans:set>
        </beans:property>
        <beans:property name="minimumKeySizes">
            <beans:map>
                <!--suppress SpringPlaceholdersInspection -->
                <beans:entry key="#{ T(gov.hhs.onc.phiz.crypto.PhizKeyType).RSA }" value="${phiz.crypto.constraints.key.rsa.size.min}"/>
            </beans:map>
        </beans:property>
        <beans:property name="signatureAlgorithmIds">
            <beans:set>
                <beans:value>#{ T(br.net.woodstock.rockframework.security.sign.SignatureType).SHA512_RSA.algorithm }</beans:value>
                <beans:value>#{ T(br.net.woodstock.rockframework.security.sign.SignatureType).SHA384_RSA.algorithm }</beans:value>
                <beans:value>#{ T(br.net.woodstock.rockframework.security.sign.SignatureType).SHA256_RSA.algorithm }</beans:value>
                <beans:value>#{ T(br.net.woodstock.rockframework.security.sign.SignatureType).SHA1_RSA.algorithm }</beans:value>
            </beans:set>
        </beans:property>
    </beans:bean>
    
    <!--====================================================================================================
    = REVOCATION CHECKERS
    =====================================================================================================-->
    <!--suppress SpringBeanConstructorArgInspection, SpringPlaceholdersInspection -->
    <beans:bean id="revocationChecker" class="gov.hhs.onc.phiz.crypto.ssl.revocation.impl.PhizRevocationChecker" parent="certPathCheckerPkix"
        lazy-init="true" scope="prototype"
        p:connectTimeout="${phiz.crypto.ocsp.conn.timeout}"
        p:digestAlgorithmId="#{ T(br.net.woodstock.rockframework.security.digest.DigestType).SHA256.algorithm }"
        p:nonceOptional="true"
        p:nonceSize="${phiz.crypto.ocsp.nonce.size}"
        p:readTimeout="${phiz.crypto.ocsp.read.timeout}"
        p:secureRandom-ref="secureRandomSha1">
        <beans:property name="preferredSignatureAlgorithmIds">
            <beans:list>
                <beans:value>#{ T(br.net.woodstock.rockframework.security.sign.SignatureType).SHA512_RSA.algorithm }</beans:value>
                <beans:value>#{ T(br.net.woodstock.rockframework.security.sign.SignatureType).SHA384_RSA.algorithm }</beans:value>
                <beans:value>#{ T(br.net.woodstock.rockframework.security.sign.SignatureType).SHA256_RSA.algorithm }</beans:value>
                <beans:value>#{ T(br.net.woodstock.rockframework.security.sign.SignatureType).SHA1_RSA.algorithm }</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>
    
    <!--suppress SpringBeanConstructorArgInspection -->
    <beans:bean id="revocationCheckerOptional" parent="revocationChecker" lazy-init="true" scope="prototype"
        p:optional="true"/>
    
    <!--====================================================================================================
    = CERTIFICATE SELECTORS
    =====================================================================================================-->
    <beans:bean id="certSelector" class="java.security.cert.CertSelector" abstract="true"/>
    
    <beans:bean id="certSelectorX509" class="java.security.cert.X509CertSelector" parent="certSelector"/>
    
    <!--====================================================================================================
    = TRUST MANAGERS
    =====================================================================================================-->
    <beans:bean id="trustManager" class="javax.net.ssl.TrustManager" abstract="true"/>
    
    <beans:bean id="trustManagerX509Extended" class="javax.net.ssl.X509ExtendedTrustManager" parent="trustManager" abstract="true"/>
    
    <beans:bean id="trustManagerBase" class="gov.hhs.onc.phiz.crypto.ssl.impl.PhizTrustManager" parent="trustManagerX509Extended" abstract="true"
        p:certificateSelector-ref="certSelectorX509"
        p:provider="#{ T(gov.hhs.onc.phiz.crypto.PhizCryptoProviders).BC }"
        p:type="PKIX">
        <beans:property name="constraintsCheckerBeanName">
            <beans:idref bean="constraintsChecker"/>
        </beans:property>
        <beans:property name="revocationCheckerBeanName">
            <beans:idref bean="revocationChecker"/>
        </beans:property>
    </beans:bean>
    
    <!--====================================================================================================
    = SSL PARAMETERS
    =====================================================================================================-->
    <!--suppress SpringPlaceholdersInspection -->
    <beans:bean id="sslParams" class="javax.net.ssl.SSLParameters" abstract="true"
        p:algorithmConstraints-ref="constraintsPermitAll"
        p:cipherSuites="${phiz.crypto.cipher.suites}"
        p:useCipherSuitesOrder="true">
        <beans:property name="protocols">
            <beans:array>
                <beans:value>#{ T(gov.hhs.onc.phiz.crypto.ssl.PhizTlsVersions).TLS_1_2_NAME }</beans:value>
            </beans:array>
        </beans:property>
    </beans:bean>
    
    <beans:bean id="sslParamsClient" parent="sslParams" abstract="true"/>
    
    <beans:bean id="sslParamsServer" parent="sslParams" abstract="true"
        p:needClientAuth="true"/>
    
    <!--====================================================================================================
    = SSL CONTEXTS
    =====================================================================================================-->
    <beans:bean id="sslContext" class="javax.net.ssl.SSLContext" abstract="true"/>
    
    <beans:bean id="sslContextBase" class="gov.hhs.onc.phiz.crypto.ssl.impl.PhizSslContextFactoryBean" parent="sslContext" abstract="true"
        p:provider="#{ T(gov.hhs.onc.phiz.crypto.PhizCryptoProviders).SUN_JSSE }"
        p:secureRandom-ref="secureRandomSha1"
        p:type="#{ T(gov.hhs.onc.phiz.crypto.ssl.PhizTlsVersions).TLS_1_2_NAME }"/>
</beans:beans>